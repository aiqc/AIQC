{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "regular-sport",
   "metadata": {},
   "source": [
    "# TensorFlow: Tabular Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "several-corrections",
   "metadata": {},
   "source": [
    "*Predicting Exoplanet Surface Temperature Using Kepler Satellite Sensor Data.*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0423577-45db-47b9-9375-139b41aed22f",
   "metadata": {},
   "source": [
    "<img src=\"../../../_static/images/banner/planets.png\" class=\"banner-photo\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3d04292-f2e0-4fff-809f-463e72eaec7e",
   "metadata": {},
   "source": [
    "## ðŸ’¾ Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acb5b772-ce82-41ab-991e-6af85863ef83",
   "metadata": {},
   "source": [
    "Reference [Example Datasets](../../datasets.html) for more information."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50385be3-4ff9-4c62-b2cd-c8a6340cdb41",
   "metadata": {},
   "source": [
    "This dataset is comprised of:\n",
    "\n",
    "* *Features* = characteristics of the planet in the context of its solar system.\n",
    "* *Label* = the temperature of the planet."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "undefined-invalid",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TypeFlag</th>\n",
       "      <th>PlanetaryMassJpt</th>\n",
       "      <th>PeriodDays</th>\n",
       "      <th>SurfaceTempK</th>\n",
       "      <th>DistFromSunParsec</th>\n",
       "      <th>HostStarMassSlrMass</th>\n",
       "      <th>HostStarRadiusSlrRad</th>\n",
       "      <th>HostStarMetallicity</th>\n",
       "      <th>HostStarTempK</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>0.2500</td>\n",
       "      <td>19.224180</td>\n",
       "      <td>707.2</td>\n",
       "      <td>650.00</td>\n",
       "      <td>1.070</td>\n",
       "      <td>1.0200</td>\n",
       "      <td>0.12</td>\n",
       "      <td>5777.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0</td>\n",
       "      <td>0.1700</td>\n",
       "      <td>39.031060</td>\n",
       "      <td>557.9</td>\n",
       "      <td>650.00</td>\n",
       "      <td>1.070</td>\n",
       "      <td>1.0200</td>\n",
       "      <td>0.12</td>\n",
       "      <td>5777.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0220</td>\n",
       "      <td>1.592851</td>\n",
       "      <td>1601.5</td>\n",
       "      <td>650.00</td>\n",
       "      <td>1.070</td>\n",
       "      <td>1.0200</td>\n",
       "      <td>0.12</td>\n",
       "      <td>5777.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0</td>\n",
       "      <td>1.2400</td>\n",
       "      <td>2.705782</td>\n",
       "      <td>2190.0</td>\n",
       "      <td>200.00</td>\n",
       "      <td>1.630</td>\n",
       "      <td>2.1800</td>\n",
       "      <td>0.12</td>\n",
       "      <td>6490.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0195</td>\n",
       "      <td>1.580404</td>\n",
       "      <td>604.0</td>\n",
       "      <td>14.55</td>\n",
       "      <td>0.176</td>\n",
       "      <td>0.2213</td>\n",
       "      <td>0.10</td>\n",
       "      <td>3250.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    TypeFlag  PlanetaryMassJpt  PeriodDays  SurfaceTempK  DistFromSunParsec  \\\n",
       "5          0            0.2500   19.224180         707.2             650.00   \n",
       "6          0            0.1700   39.031060         557.9             650.00   \n",
       "7          0            0.0220    1.592851        1601.5             650.00   \n",
       "15         0            1.2400    2.705782        2190.0             200.00   \n",
       "16         0            0.0195    1.580404         604.0              14.55   \n",
       "\n",
       "    HostStarMassSlrMass  HostStarRadiusSlrRad  HostStarMetallicity  \\\n",
       "5                 1.070                1.0200                 0.12   \n",
       "6                 1.070                1.0200                 0.12   \n",
       "7                 1.070                1.0200                 0.12   \n",
       "15                1.630                2.1800                 0.12   \n",
       "16                0.176                0.2213                 0.10   \n",
       "\n",
       "    HostStarTempK  \n",
       "5          5777.0  \n",
       "6          5777.0  \n",
       "7          5777.0  \n",
       "15         6490.0  \n",
       "16         3250.0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from aiqc import datum\n",
    "df = datum.to_pandas('exoplanets.parquet')\n",
    "df.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7b564076-caf3-47df-8651-a9f69422eebf",
   "metadata": {},
   "outputs": [],
   "source": [
    "from aiqc.orm import Dataset\n",
    "shared_dataset = Dataset.Tabular.from_df(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dirty-reporter",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7ac4fba-890a-47a3-a661-4e7d90cc121f",
   "metadata": {},
   "source": [
    "## ðŸš° Pipeline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "brazilian-vegetation",
   "metadata": {},
   "source": [
    "Reference [High-Level API Docs](../../api_high_level.ipynb) for more information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "41900892-3f20-4ac5-b32d-e6cbf38aef18",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from aiqc.mlops import Pipeline, Input, Target, Stratifier\n",
    "from sklearn.preprocessing import StandardScaler, RobustScaler, OneHotEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b7f585ec-f9aa-4d60-8c91-0e86c9ac725c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "â””â”€â”€ Info - System overriding user input to set `sklearn_preprocess.copy=False`.\n",
      "\tThis saves memory when concatenating the output of many encoders.\n",
      "\n",
      "\n",
      "â””â”€â”€ Info - System overriding user input to set `sklearn_preprocess.copy=False`.\n",
      "\tThis saves memory when concatenating the output of many encoders.\n",
      "\n",
      "\n",
      "â””â”€â”€ Info - System overriding user input to set `sklearn_preprocess.sparse=False`.\n",
      "\tThis would have generated 'scipy.sparse.csr.csr_matrix', causing Keras training to fail.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "pipeline = Pipeline(\n",
    "    Input(\n",
    "        dataset  = shared_dataset,\n",
    "        encoders = [\n",
    "            Input.Encoder(\n",
    "                RobustScaler(),\n",
    "                dtypes = ['float64']\n",
    "            ),\n",
    "            Input.Encoder(\n",
    "                OneHotEncoder(),\n",
    "                dtypes = ['int64']\n",
    "            )\n",
    "        ]\n",
    "    ),\n",
    "        \n",
    "    Target(\n",
    "        dataset   = shared_dataset\n",
    "        , column  = 'SurfaceTempK'\n",
    "        , encoder = Target.Encoder(StandardScaler())\n",
    "    ),\n",
    "\n",
    "    Stratifier(\n",
    "        size_test         = 0.12\n",
    "        , size_validation = 0.22\n",
    "        , fold_count      = None\n",
    "        , bin_count       = 4\n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "grave-likelihood",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3e40a51-f50f-4ad1-aed3-cf8dd3dc2267",
   "metadata": {},
   "source": [
    "## ðŸ§ª Experiment"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b77398bd-a7ec-4dca-b1eb-b105933d78b4",
   "metadata": {},
   "source": [
    "Reference [High-Level API Docs](../../api_high_level.ipynb) for more information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8829301d-a3bb-44e3-8424-ca7f8b33d89a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from aiqc.mlops import Experiment, Architecture, Trainer\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras import layers as l\n",
    "from aiqc.utils.tensorflow import TrainingCallback"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "applicable-calibration",
   "metadata": {},
   "outputs": [],
   "source": [
    "def fn_build(features_shape, label_shape, **hp):\n",
    "    m = tf.keras.models.Sequential()    \n",
    "    m.add(l.Input(shape=features_shape))\n",
    "\n",
    "    # Example of using hyperparameters to tweak topology.\n",
    "    # with 'block' for each layer.\n",
    "    for block in range(hp['blocks']):\n",
    "        # Example of using hyperparameters to tweak topology.\n",
    "        m.add(l.Dense(hp['neuron_count']))\n",
    "        \n",
    "        # Example of using hyperparameters to tweak topology. \n",
    "        # BatchNorm, Activation, Dropout (B.A.D.)\n",
    "        if (hp['batch_norm'] == True):\n",
    "            m.add(l.BatchNormalization())\n",
    "      \n",
    "        m.add(l.Activation('relu'))\n",
    "        m.add(l.Dropout(0.2))\n",
    "              \n",
    "    m.add(l.Dense(label_shape[0]))\n",
    "    return m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "hungry-morocco",
   "metadata": {},
   "outputs": [],
   "source": [
    "def fn_train(\n",
    "    model, loser, optimizer,\n",
    "    train_features, train_label,\n",
    "    eval_features, eval_label,\n",
    "    **hp\n",
    "):\n",
    "    model.compile(\n",
    "        loss        = loser\n",
    "        , optimizer = optimizer\n",
    "        , metrics   = ['mean_squared_error']\n",
    "    )\n",
    "    \n",
    "    metrics_cuttoffs = [\n",
    "        dict(metric='val_loss', cutoff=0.025, above_or_below='below'),\n",
    "        dict(metric='loss', cutoff=0.025, above_or_below='below'),\n",
    "    ]\n",
    "    cutoffs = TrainingCallback.MetricCutoff(metrics_cuttoffs)\n",
    "    \n",
    "    model.fit(\n",
    "        train_features, train_label\n",
    "        , validation_data = (eval_features, eval_label)\n",
    "        , verbose         = 0\n",
    "        , batch_size      = hp['batch_size']\n",
    "        , callbacks       = [tf.keras.callbacks.History(), cutoffs]\n",
    "        , epochs          = hp['epoch_count']\n",
    "    )\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "pursuant-german",
   "metadata": {},
   "outputs": [],
   "source": [
    "hyperparameters = dict(\n",
    "    batch_size      = [3]\n",
    "    , blocks        = [2]\n",
    "    , batch_norm    = [True, False]\n",
    "    , epoch_count   = [75]\n",
    "    , neuron_count  = [24, 36]\n",
    "    , learning_rate = [0.01]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "89fd0988-a88b-4b32-823a-3203c37f3c9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "experiment = Experiment(\n",
    "    Architecture(\n",
    "        library           = \"keras\"\n",
    "        , analysis_type   = \"regression\"\n",
    "        , fn_build        = fn_build\n",
    "        , fn_train        = fn_train\n",
    "        , hyperparameters = hyperparameters\n",
    "    ),\n",
    "    \n",
    "    Trainer(\n",
    "        pipeline       = pipeline\n",
    "        , repeat_count = 2\n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "killing-contributor",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ðŸ“¦ Caching Splits ðŸ“¦: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 3/3 [00:00<00:00, 382.83it/s]\n",
      "ðŸ”® Training Models ðŸ”®: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 8/8 [01:39<00:00, 12.43s/it]\n"
     ]
    }
   ],
   "source": [
    "experiment.run_jobs()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "660a1493-2ba1-4191-b02f-02a0065af3ad",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "368dce24-6a3d-4cc2-9add-02ae5e2f178d",
   "metadata": {},
   "source": [
    "## ðŸ“Š Visualization & Interpretation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa16c989-2170-4a61-9a31-2a8f78af282c",
   "metadata": {},
   "source": [
    "For more information on visualization of performance metrics, reference the [Dashboard](../../dashboard.html) documentation."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
